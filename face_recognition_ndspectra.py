# -*- coding: utf-8 -*-
"""Face Recognition -NDSPECTRA

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1O-eFCxuwPSp6pwKJHfOdN6sRebyoOvgu
"""

# Most Recent One (Suggested)
!pip install git+https://github.com/rcmalli/keras-vggface.git
# Release Version
!pip install keras_vggface

!pip install Keras-Applications
!pip install mtcnn

'''
Note: We are currently using tensorflow 2.15. The VGGFace is supported only till 2.12.
we should revert back to 2.12.

https://github.com/rcmalli/keras-vggface/issues/97

'''

!pip uninstall keras
!pip install keras==2.12

!pip install keras-facenet

# from mtcnn import MTCNN
# import tensorflow as tf
# from keras_facenet import FaceNet
# import keras
# import keras_applications
# import keras_vggface
# from keras.models import load_model
# import numpy as np
# import os
# from PIL import Image
# import cv2
# from matplotlib import pyplot as plt
# from sklearn.metrics import confusion_matrix
# import seaborn as sns
# from sklearn.metrics import classification_report
# from scipy.spatial.distance import cosine
# from sklearn.preprocessing import LabelEncoder
# from sklearn.metrics import accuracy_score
# from sklearn.model_selection import cross_val_score
# from sklearn.linear_model import LogisticRegression
# from sklearn.naive_bayes import GaussianNB
# from sklearn.ensemble import RandomForestClassifier
# from sklearn.svm import SVC
# from sklearn.neighbors import KNeighborsClassifier
# from sklearn.ensemble import VotingClassifier
# from sklearn.preprocessing import StandardScaler
# from sklearn.pipeline import make_pipeline
# from sklearn.metrics.pairwise import cosine_similarity



import numpy as np
from PIL import Image
from keras_facenet import FaceNet
from mtcnn import MTCNN
import matplotlib.pyplot as plt
from sklearn.neighbors import KNeighborsClassifier
from sklearn.preprocessing import normalize


class Face_Recognition:
  def __init__(self):
    self.embedder = FaceNet()
    self.detector = MTCNN()

  # Function to extract a single face from an image
  def extract_face(self,filename, required_size=(160, 160)):
    image = Image.open(filename)
    image = image.convert('RGB')
    pixels = np.asarray(image)
    results = detector.detect_faces(pixels)
    if not results:
        raise Exception("No face detected")

    x1, y1, width, height = results[0]['box'] #cutting out the face from the image
    x2, y2 = x1 + width, y1 + height
    face = pixels[y1:y2, x1:x2]
    image = Image.fromarray(face)
    image = image.resize(required_size)
    face_array = np.asarray(image)
    return face_array

  # Function to find matches and display results
  def find_and_display_matches(self,known_faces, val_faces, known_labels, val_embeddings, knn):
    for i, val_embedding in enumerate(val_embeddings):
      val_face_path = val_faces[i]
      val_face_img = Image.open(val_face_path)

      # Predict the label of the validation embedding
      predicted_label = knn.predict([val_embedding])[0]
      distances, indices = knn.kneighbors([val_embedding], n_neighbors=1)
      similarity = 1 - distances[0][0]

      matched_face_path = known_faces[indices[0][0]]
      matched_face_img = Image.open(matched_face_path)

      fig, ax = plt.subplots(1, 2, figsize=(10, 5))
      ax[0].imshow(val_face_img)
      ax[0].set_title(f'Validation Face\n{val_face_path}')
      ax[0].axis('off')

      ax[1].imshow(matched_face_img)
      if similarity > 0.5:  # Adjust threshold as needed
          ax[1].set_title(f'Matched: {predicted_label}\n(Cosine Similarity: {similarity:.2f})')
      else:
          ax[1].set_title(f'Not Matched\n(Cosine Similarity: {similarity:.2f})')
      ax[1].axis('off')

      plt.show()


if __name__ =='__main__':
  face_recognition=Face_Recognition()
  # Load and extract faces
  known_faces = ['/content/im_1.jpeg', '/content/im_4.jpeg', '/content/im_7.jpeg','/content/img_10.jpg']
  val_faces = ['/content/im_2.jpeg', '/content/im_5.jpeg', '/content/im_8.jpeg','/content/img_12.jpg']

  known_labels = ['person_1', 'person_2', 'person_3','person_4']  # Labels for known faces

  known_embeddings = [face_recognition.extract_face(i) for i in known_faces]
  val_embeddings = [face_recognition.extract_face(i) for i in val_faces]

  # Generate embeddings
  known_embeddings = [face_recognition.embedder.embeddings(np.expand_dims(i, axis=0))[0] for i in known_embeddings]
  val_embeddings = [face_recognition.embedder.embeddings(np.expand_dims(i, axis=0))[0] for i in val_embeddings]

  # Normalize embeddings
  known_embeddings = normalize(known_embeddings)
  val_embeddings = normalize(val_embeddings)

  # Train KNN classifier
  knn = KNeighborsClassifier(n_neighbors=1, metric='cosine')
  knn.fit(known_embeddings, known_labels)

  face_recognition.find_and_display_matches(known_faces, val_faces, known_labels, val_embeddings, knn)